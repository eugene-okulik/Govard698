import requests
import pytest


# –§–∏–∫—Å—Ç—É—Ä–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è—Å—è –ü–ï–†–ï–î –∏ –ü–û–°–õ–ï –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
@pytest.fixture(autouse=True)
def around_each_test():
    print("\n=== before test ===")
    yield
    print("=== after test ===")


# –§–∏–∫—Å—Ç—É—Ä–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è—Å—è –û–î–ò–ù –†–ê–ó –∑–∞ –≤—Å—é —Å–µ—Å—Å–∏—é
@pytest.fixture(scope='session', autouse=True)
def hello():
    print("\n=== Start testing ===")
    yield
    print("=== Testing completed ===")


# –§–∏–∫—Å—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—é—â–∞—è –∏ —É–¥–∞–ª—è—é—â–∞—è –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
@pytest.fixture()
def created_object():
    body = {
        "name": "ivanka",
        "data": {"group": 13121231},
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(
        "http://objapi.course.qa-practice.com/object",
        json=body,
        headers=headers,
    )
    assert response.status_code == 200
    post_id = response.json()["id"]
    print(f"Created post id: {post_id}")

    yield post_id

    print(f"Deleting post {post_id}")
    requests.delete(f"http://objapi.course.qa-practice.com/object/{post_id}")


# üîπ –¢–µ—Å—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π (—Å–æ–∑–¥–∞—ë—Ç 3 —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞)
@pytest.mark.parametrize('name', ['mashka', 'kakashka', 'martushka'])
def test_create_object(name):
    body = {
        "name": name,
        "data": {"group": 13121231},
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(
        "http://objapi.course.qa-practice.com/object",
        json=body,
        headers=headers,
    )

    assert response.status_code == 200
    api_response = response.json()
    print(f"Created: {api_response}")
    assert api_response["name"] == name

    # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π
    requests.delete(f"http://objapi.course.qa-practice.com/object/{api_response['id']}")


# üîπ –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ id
def test_get_post(created_object):
    response = requests.get(f"http://objapi.course.qa-practice.com/object/{created_object}")
    assert response.status_code == 200
    api_response = response.json()
    print(f"Get object id={api_response['id']}")
    assert api_response["id"] == created_object, "ID not found"


# üîπ –¢–µ—Å—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ–º–µ—á–µ–Ω –∫–∞–∫ medium)
@pytest.mark.medium
def test_put_post(created_object):
    body = {
        "name": "andriyanov ivan",
        "data": {"group": "password test"},
    }
    headers = {"Content-Type": "application/json"}
    response = requests.put(
        f"http://objapi.course.qa-practice.com/object/{created_object}",
        json=body,
        headers=headers,
    )

    assert response.status_code == 200
    api_response = response.json()
    print(f"Updated object: {api_response}")
    assert api_response["name"] == "andriyanov ivan"


# üîπ –¢–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ–º–µ—á–µ–Ω –∫–∞–∫ critical)
@pytest.mark.parametrize('name', ['alisa', 'lesha', 'luda'])
@pytest.mark.critical
def test_patch_post(created_object, name):
    body = {
        "name": name,
        "data": {"group": "312312123asdasd"},
    }
    headers = {"Content-Type": "application/json"}
    response = requests.patch(
        f"http://objapi.course.qa-practice.com/object/{created_object}",
        json=body,
        headers=headers,
    )

    assert response.status_code == 200
    api_response = response.json()
    print(f"–ò–º—è –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –Ω–∞: {api_response['name']}")
    assert api_response["name"] == name, "name not found"


def test_del_obj(created_object):
    headers = {"Content-Type": "application/json"}
    response = requests.delete(
        f"http://objapi.course.qa-practice.com/object/{created_object}",
        headers=headers,
    )
    assert response.status_code == 200
